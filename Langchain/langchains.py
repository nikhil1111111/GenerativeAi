
import os
from langchain.llms import AI21
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain, SimpleSequentialChain
from secret_key import AI21_API_KEY

os.environ['AI21_API_KEY'] = AI21_API_KEY

llm = AI21(temperature=1)

health_recommendation_prompt = PromptTemplate(
    input_variables=['text'],
    template="{text} Based on your information (age, gender, medical history), I recommend personalized health tips such as diet suggestions, exercise routines, and preventive care measures."
)

medication_reminder_prompt = PromptTemplate(
    input_variables=['text'],
    template="{text} I can help you set medication schedules and send reminders for doses, refills, and potential interactions."
)

chain_health_recommendation = LLMChain(llm=llm, prompt=health_recommendation_prompt, output_key='output_chain')
chain_medication_reminder = LLMChain(llm=llm, prompt=medication_reminder_prompt, output_key='output_chains')

chain = SimpleSequentialChain(chains=[chain_health_recommendation, chain_medication_reminder])

def run_langchain(input_data):
    """
    Runs the LangChain pipeline with input data.

    Args:
    - input_data (str): Input text for the LangChain pipeline.

    Returns:
    - str: Response generated by the LangChain pipeline.
    """
    return chain.run(input_data)































# import os
# from langchain.llms import AI21
# from langchain.prompts import PromptTemplate
# from langchain.chains import LLMChain, SimpleSequentialChain

# # Import API key
# from secret_key import AI21_API_KEY

# # Set API key as environment variable
# os.environ['AI21_API_KEY'] = AI21_API_KEY

# # Initialize AI21 instance
# llm = AI21(temperature=1)

# # Define PromptTemplate for personalized health recommendations
# health_recommendation_prompt = PromptTemplate(
#     input_variables=['text'],
#     template="{text} Based on your information (age, gender, medical history), I recommend personalized health tips such as diet suggestions, exercise routines, and preventive care measures."
# )

# # Define PromptTemplate for medication schedules and reminders
# medication_reminder_prompt = PromptTemplate(
#     input_variables=['text'],
#     template="{text} I can help you set medication schedules and send reminders for doses, refills, and potential interactions."
# )

# # Initialize LLMChain instances for each prompt
# chain_health_recommendation = LLMChain(llm=llm, prompt=health_recommendation_prompt, output_key='output_chain')
# chain_medication_reminder = LLMChain(llm=llm, prompt=medication_reminder_prompt, output_key='output_chains')

# # Create a SimpleSequentialChain with the defined LLMChain instances
# chain = SimpleSequentialChain(chains=[chain_health_recommendation, chain_medication_reminder])

# # Run the chain with input data
# input_data = "User's input text here"
# response = chain.run(input_data)
# print(response)
